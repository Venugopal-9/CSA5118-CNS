#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Modular exponentiation: (base^exp) % mod
long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2)
            result = (result * base) % mod;
        exp >>= 1;
        base = (base * base) % mod;
    }
    return result;
}

// Function to calculate (a * b) % mod
long long mod_mul(long long a, long long b, long long mod) {
    return ((a % mod) * (b % mod)) % mod;
}

// Extended Euclidean Algorithm to find modular inverse
long long mod_inverse(long long a, long long m) {
    long long m0 = m, t, q;
    long long x0 = 0, x1 = 1;
    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        // m is remainder now
        m = a % m, a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;
    return x1;
}

int main() {
    // Example primes for demonstration
    long long p = 23;        // Prime
    long long q = 11;        // A prime factor of (p-1)
    long long g = 4;         // Generator

    // Private key
    long long x = 3;

    // Public key
    long long y = mod_exp(g, x, p);

    printf("Public key (y): %lld\n", y);

    // Message hash (in real life, use SHA or another hash)
    long long H = 9;

    // Select random k (0 < k < q)
    long long k = 7;

    // Calculate r = (g^k mod p) mod q
    long long r = mod_exp(g, k, p) % q;

    // s = (k^-1 * (H + x * r)) mod q
    long long k_inv = mod_inverse(k, q);
    long long s = mod_mul(k_inv, (H + mod_mul(x, r, q)), q);

    printf("Digital Signature (r, s): (%lld, %lld)\n", r, s);

    // Verification
    long long w = mod_inverse(s, q);
    long long u1 = mod_mul(H, w, q);
    long long u2 = mod_mul(r, w, q);
    long long v = (mod_exp(g, u1, p) * mod_exp(y, u2, p)) % p;
    v = v % q;

    if (v == r)
        printf("Signature is VALID\n");
    else
        printf("Signature is INVALID\n");

    return 0;
}
